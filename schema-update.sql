-- Add company information tables

-- Company Info table
CREATE TABLE public.company_info (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    tagline TEXT,
    website VARCHAR(255),
    vision TEXT,
    mission TEXT,
    certifications TEXT[],
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Company Stats table
CREATE TABLE public.company_stats (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    established INTEGER NOT NULL,
    incorporated INTEGER NOT NULL,
    cities_covered VARCHAR(50),
    workforce VARCHAR(50),
    client_base VARCHAR(50),
    completed_projects VARCHAR(50),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Company Offices table
CREATE TABLE public.company_offices (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    address TEXT,
    po_box VARCHAR(100),
    phone TEXT[],
    email VARCHAR(255),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Company Personnel table
CREATE TABLE public.company_personnel (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    phone TEXT[],
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Company Registration table
CREATE TABLE public.company_registration (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    incorporation_certificate VARCHAR(100),
    vat_registration VARCHAR(100),
    pin_certificate VARCHAR(100),
    tax_compliance VARCHAR(100),
    etr_serial VARCHAR(100),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Apply updated_at triggers to new tables
CREATE TRIGGER update_company_info_updated_at BEFORE UPDATE ON public.company_info FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_company_stats_updated_at BEFORE UPDATE ON public.company_stats FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_company_offices_updated_at BEFORE UPDATE ON public.company_offices FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_company_personnel_updated_at BEFORE UPDATE ON public.company_personnel FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_company_registration_updated_at BEFORE UPDATE ON public.company_registration FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Enable Row Level Security
ALTER TABLE public.company_info ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.company_stats ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.company_offices ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.company_personnel ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.company_registration ENABLE ROW LEVEL SECURITY;

-- Create RLS policies for company information (public read, admin write)
CREATE POLICY "Public can view company info" ON public.company_info FOR SELECT USING (true);
CREATE POLICY "Admins can manage company info" ON public.company_info FOR ALL USING (auth.jwt() ->> 'role' = 'admin');

CREATE POLICY "Public can view company stats" ON public.company_stats FOR SELECT USING (true);
CREATE POLICY "Admins can manage company stats" ON public.company_stats FOR ALL USING (auth.jwt() ->> 'role' = 'admin');

CREATE POLICY "Public can view company offices" ON public.company_offices FOR SELECT USING (true);
CREATE POLICY "Admins can manage company offices" ON public.company_offices FOR ALL USING (auth.jwt() ->> 'role' = 'admin');

CREATE POLICY "Public can view company personnel" ON public.company_personnel FOR SELECT USING (true);
CREATE POLICY "Admins can manage company personnel" ON public.company_personnel FOR ALL USING (auth.jwt() ->> 'role' = 'admin');

CREATE POLICY "Public can view company registration" ON public.company_registration FOR SELECT USING (true);
CREATE POLICY "Admins can manage company registration" ON public.company_registration FOR ALL USING (auth.jwt() ->> 'role' = 'admin');

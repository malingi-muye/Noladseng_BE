-- Supabase Database Schema for Nolads Engineering
-- Run this SQL in your Supabase SQL Editor to create all necessary tables

-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Users table (extends Supabase auth.users)
CREATE TABLE public.users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    phone VARCHAR(20),
    role VARCHAR(20) DEFAULT 'user' CHECK (role IN ('user', 'admin')),
    avatar_url TEXT,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Services table
CREATE TABLE public.services (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    short_description TEXT,
    price_range VARCHAR(100),
    category VARCHAR(100),
    image_url TEXT,
    features TEXT, -- JSON string
    is_active BOOLEAN DEFAULT true,
    is_featured BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Products table
CREATE TABLE public.products (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    price DECIMAL(12,2),
    category VARCHAR(100),
    image_url TEXT,
    images TEXT, -- JSON array of image URLs
    specifications TEXT, -- JSON string
    stock_quantity INTEGER DEFAULT 0,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Quotes table
CREATE TABLE public.quotes (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT REFERENCES public.users(id),
    service_id BIGINT REFERENCES public.services(id),
    project_name VARCHAR(255) NOT NULL,
    description TEXT,
    requirements TEXT, -- JSON string
    budget_range VARCHAR(100),
    timeline VARCHAR(100),
    status VARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'reviewed', 'approved', 'rejected')),
    estimated_cost DECIMAL(12,2),
    notes TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Contact Messages table
CREATE TABLE public.contact_messages (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    phone VARCHAR(20),
    subject VARCHAR(255),
    message TEXT NOT NULL,
    status VARCHAR(20) DEFAULT 'unread' CHECK (status IN ('unread', 'read', 'replied')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Testimonials table
CREATE TABLE public.testimonials (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT REFERENCES public.users(id),
    name VARCHAR(255) NOT NULL,
    company VARCHAR(255),
    position VARCHAR(255),
    content TEXT NOT NULL,
    rating INTEGER CHECK (rating >= 1 AND rating <= 5),
    is_featured BOOLEAN DEFAULT false,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Images table for file management
CREATE TABLE public.images (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    filename VARCHAR(255) NOT NULL,
    original_name VARCHAR(255) NOT NULL,
    mime_type VARCHAR(100) NOT NULL,
    size INTEGER NOT NULL,
    path TEXT NOT NULL,
    url TEXT NOT NULL,
    alt_text TEXT,
    entity_type VARCHAR(50) CHECK (entity_type IN ('user', 'service', 'product', 'quote')),
    entity_id BIGINT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Blog Posts table
CREATE TABLE public.blog_posts (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    slug VARCHAR(255) UNIQUE NOT NULL,
    content TEXT NOT NULL,
    excerpt TEXT,
    featured_image TEXT,
    category VARCHAR(100),
    tags TEXT[], -- Array of tags
    author_id BIGINT REFERENCES public.users(id),
    status VARCHAR(20) DEFAULT 'draft' CHECK (status IN ('draft', 'published', 'archived')),
    published_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    meta_title VARCHAR(255),
    meta_description TEXT
);

-- Create updated_at triggers for automatic timestamp updates
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create blog post management functions
CREATE OR REPLACE FUNCTION create_blog_post(
    post_data JSONB,
    tag_ids JSONB DEFAULT NULL
)
RETURNS JSONB AS $$
DECLARE
    new_post_id BIGINT;
    result JSONB;
    tags_array TEXT[];
BEGIN
    -- Convert tag_ids JSONB to TEXT[] if provided
    IF tag_ids IS NOT NULL THEN
        SELECT ARRAY(SELECT jsonb_array_elements_text(tag_ids)) INTO tags_array;
    END IF;
    
    -- Insert the blog post
    INSERT INTO public.blog_posts (
        title,
        slug,
        content,
        excerpt,
        featured_image,
        category,
        tags,
        author_id,
        status,
        published_at,
        meta_title,
        meta_description
    ) VALUES (
        (post_data->>'title')::VARCHAR(255),
        (post_data->>'slug')::VARCHAR(255),
        (post_data->>'content')::TEXT,
        (post_data->>'excerpt')::TEXT,
        (post_data->>'featured_image')::TEXT,
        (post_data->>'category')::VARCHAR(100),
        COALESCE(tags_array, (post_data->'tags')::TEXT[]),
        (post_data->>'author_id')::BIGINT,
        COALESCE((post_data->>'status')::VARCHAR(20), 'draft'),
        CASE 
            WHEN (post_data->>'status')::VARCHAR(20) = 'published' THEN NOW()
            ELSE NULL
        END,
        (post_data->>'meta_title')::VARCHAR(255),
        (post_data->>'meta_description')::TEXT
    ) RETURNING id INTO new_post_id;
    
    -- Return the created post data
    SELECT to_jsonb(bp.*) INTO result
    FROM public.blog_posts bp
    WHERE bp.id = new_post_id;
    
    RETURN result;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION update_blog_post(
    post_id BIGINT,
    post_updates JSONB,
    tag_ids JSONB DEFAULT NULL
)
RETURNS JSONB AS $$
DECLARE
    result JSONB;
    tags_array TEXT[];
BEGIN
    -- Convert tag_ids JSONB to TEXT[] if provided
    IF tag_ids IS NOT NULL THEN
        SELECT ARRAY(SELECT jsonb_array_elements_text(tag_ids)) INTO tags_array;
    END IF;
    
    -- Update the blog post
    UPDATE public.blog_posts SET
        title = COALESCE((post_updates->>'title')::VARCHAR(255), title),
        slug = COALESCE((post_updates->>'slug')::VARCHAR(255), slug),
        content = COALESCE((post_updates->>'content')::TEXT, content),
        excerpt = COALESCE((post_updates->>'excerpt')::TEXT, excerpt),
        featured_image = COALESCE((post_updates->>'featured_image')::TEXT, featured_image),
        category = COALESCE((post_updates->>'category')::VARCHAR(100), category),
        tags = COALESCE(tags_array, (post_updates->'tags')::TEXT[], tags),
        author_id = COALESCE((post_updates->>'author_id')::BIGINT, author_id),
        status = COALESCE((post_updates->>'status')::VARCHAR(20), status),
        published_at = CASE 
            WHEN (post_updates->>'status')::VARCHAR(20) = 'published' AND published_at IS NULL THEN NOW()
            WHEN (post_updates->>'status')::VARCHAR(20) != 'published' THEN NULL
            ELSE published_at
        END,
        meta_title = COALESCE((post_updates->>'meta_title')::VARCHAR(255), meta_title),
        meta_description = COALESCE((post_updates->>'meta_description')::TEXT, meta_description),
        updated_at = NOW()
    WHERE id = post_id;
    
    -- Return the updated post data
    SELECT to_jsonb(bp.*) INTO result
    FROM public.blog_posts bp
    WHERE bp.id = post_id;
    
    RETURN result;
END;
$$ LANGUAGE plpgsql;

-- Apply updated_at triggers to relevant tables
CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON public.users FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_services_updated_at BEFORE UPDATE ON public.services FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_products_updated_at BEFORE UPDATE ON public.products FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_quotes_updated_at BEFORE UPDATE ON public.quotes FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_testimonials_updated_at BEFORE UPDATE ON public.testimonials FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_blog_posts_updated_at BEFORE UPDATE ON public.blog_posts FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Create indexes for better performance
CREATE INDEX idx_users_email ON public.users(email);
CREATE INDEX idx_users_role ON public.users(role);
CREATE INDEX idx_services_active ON public.services(is_active);
CREATE INDEX idx_services_category ON public.services(category);
CREATE INDEX idx_products_active ON public.products(is_active);
CREATE INDEX idx_products_category ON public.products(category);
CREATE INDEX idx_quotes_user_id ON public.quotes(user_id);
CREATE INDEX idx_quotes_service_id ON public.quotes(service_id);
CREATE INDEX idx_quotes_status ON public.quotes(status);
CREATE INDEX idx_contact_messages_status ON public.contact_messages(status);
CREATE INDEX idx_testimonials_active ON public.testimonials(is_active);
CREATE INDEX idx_testimonials_featured ON public.testimonials(is_featured);
CREATE INDEX idx_blog_posts_status ON public.blog_posts(status);
CREATE INDEX idx_blog_posts_slug ON public.blog_posts(slug);
CREATE INDEX idx_blog_posts_category ON public.blog_posts(category);

-- Enable Row Level Security (RLS)
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.services ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.products ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.quotes ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.contact_messages ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.testimonials ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.images ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.blog_posts ENABLE ROW LEVEL SECURITY;

-- Create RLS policies

-- Services: Public read access, admin write access
CREATE POLICY "Public can view active services" ON public.services FOR SELECT USING (is_active = true);
CREATE POLICY "Admins can manage services" ON public.services FOR ALL USING (auth.jwt() ->> 'role' = 'admin');

-- Products: Public read access, admin write access
CREATE POLICY "Public can view active products" ON public.products FOR SELECT USING (is_active = true);
CREATE POLICY "Admins can manage products" ON public.products FOR ALL USING (auth.jwt() ->> 'role' = 'admin');

-- Quotes: Public can create quotes, admins can manage all
CREATE POLICY "Anyone can create quotes" ON public.quotes FOR INSERT WITH CHECK (true);
CREATE POLICY "Admins can view all quotes" ON public.quotes FOR SELECT USING (auth.jwt() ->> 'role' = 'admin');
CREATE POLICY "Admins can manage quotes" ON public.quotes FOR ALL USING (auth.jwt() ->> 'role' = 'admin');

-- Contact messages: Public can create, admins can read all
CREATE POLICY "Anyone can create contact messages" ON public.contact_messages FOR INSERT WITH CHECK (true);
CREATE POLICY "Admins can view contact messages" ON public.contact_messages FOR SELECT USING (auth.jwt() ->> 'role' = 'admin');
CREATE POLICY "Admins can update contact messages" ON public.contact_messages FOR UPDATE USING (auth.jwt() ->> 'role' = 'admin');

-- Testimonials: Public read access for active, admin full access
CREATE POLICY "Public can view active testimonials" ON public.testimonials FOR SELECT USING (is_active = true);
CREATE POLICY "Admins can manage testimonials" ON public.testimonials FOR ALL USING (auth.jwt() ->> 'role' = 'admin');

-- Users: Users can view/update their own profile, admins can manage all
CREATE POLICY "Users can view own profile" ON public.users FOR SELECT USING (auth.uid()::text = id::text OR auth.jwt() ->> 'role' = 'admin');
CREATE POLICY "Users can update own profile" ON public.users FOR UPDATE USING (auth.uid()::text = id::text);
CREATE POLICY "Admins can manage users" ON public.users FOR ALL USING (auth.jwt() ->> 'role' = 'admin');

-- Blog posts: Public read access for published, admin full access
CREATE POLICY "Public can view published blog posts" ON public.blog_posts FOR SELECT USING (status = 'published');
CREATE POLICY "Admins can manage blog posts" ON public.blog_posts FOR ALL USING (auth.jwt() ->> 'role' = 'admin');

-- Images: Public read access, authenticated users can upload
CREATE POLICY "Public can view images" ON public.images FOR SELECT USING (true);
CREATE POLICY "Authenticated users can upload images" ON public.images FOR INSERT WITH CHECK (auth.role() = 'authenticated');
CREATE POLICY "Users can manage own images" ON public.images FOR ALL USING (auth.jwt() ->> 'role' = 'admin');

-- Insert sample data

-- FIRST: Create a sample user for blog posts to reference
INSERT INTO public.users (email, first_name, last_name, role, is_active) VALUES
('admin@noladsengineering.com', 'Nolads', 'Engineering', 'admin', true);

-- Sample Services
INSERT INTO public.services (name, description, short_description, category, is_active) VALUES
('Electrical Design & Engineering', 'Complete electrical system design and engineering services for industrial applications', 'Professional electrical design services', 'Design', true),
('Power System Installation', 'Installation of power distribution systems, transformers, and electrical infrastructure', 'Power system installation services', 'Installation', true),
('Industrial Automation', 'Automation solutions for manufacturing and industrial processes', 'Industrial automation services', 'Automation', true),
('Electrical Maintenance', 'Preventive and corrective maintenance for electrical systems', 'Electrical maintenance services', 'Maintenance', true),
('Safety & Compliance', 'Electrical safety audits and compliance consulting', 'Safety and compliance services', 'Safety', true);

-- Sample Products
INSERT INTO public.products (name, description, category, price, stock_quantity, is_active) VALUES
('Industrial Circuit Breakers', 'High-quality circuit breakers for industrial applications', 'Safety Equipment', 1500.00, 50, true),
('Power Transformers', 'Step-up and step-down transformers for various applications', 'Transformers', 25000.00, 10, true),
('Control Panels', 'Custom-built electrical control panels', 'Control Systems', 5000.00, 25, true),
('Cable Management Systems', 'Professional cable management and routing solutions', 'Accessories', 200.00, 100, true),
('Electrical Meters', 'Digital and analog electrical measurement instruments', 'Instruments', 800.00, 75, true);

-- Sample Testimonials
INSERT INTO public.testimonials (name, company, position, content, rating, is_featured, is_active) VALUES
('John Smith', 'ABC Manufacturing', 'Operations Manager', 'Nolads Engineering delivered exceptional electrical design services for our new facility. Professional, timely, and cost-effective.', 5, true, true),
('Sarah Johnson', 'XYZ Industries', 'Plant Manager', 'Their automation solutions increased our productivity by 30%. Highly recommended for industrial electrical work.', 5, true, true),
('Michael Brown', 'Tech Solutions Ltd', 'CEO', 'Outstanding electrical maintenance services. They keep our systems running smoothly with minimal downtime.', 4, false, true);

-- Sample Blog Posts (NOW this will work because user ID 1 exists)
INSERT INTO public.blog_posts (title, slug, content, excerpt, category, status, author_id, published_at) VALUES
('The Future of Industrial Automation', 'future-of-industrial-automation', 'Industrial automation is rapidly evolving with new technologies...', 'Exploring emerging trends in industrial automation and their impact on modern manufacturing.', 'Technology', 'published', 1, NOW()),
('Electrical Safety Best Practices', 'electrical-safety-best-practices', 'Electrical safety is paramount in any industrial setting...', 'Essential safety guidelines and best practices for electrical work in industrial environments.', 'Safety', 'published', 1, NOW()),
('Energy Efficiency in Modern Buildings', 'energy-efficiency-modern-buildings', 'Modern buildings require smart electrical systems...', 'How to implement energy-efficient electrical systems in commercial and industrial buildings.', 'Efficiency', 'published', 1, NOW());

COMMENT ON TABLE public.users IS 'User profiles and authentication data';
COMMENT ON TABLE public.services IS 'Company services and offerings';
COMMENT ON TABLE public.products IS 'Products catalog and inventory';
COMMENT ON TABLE public.quotes IS 'Customer quote requests and proposals';
COMMENT ON TABLE public.contact_messages IS 'Contact form submissions and inquiries';
COMMENT ON TABLE public.testimonials IS 'Customer testimonials and reviews';
COMMENT ON TABLE public.images IS 'File uploads and image management';
COMMENT ON TABLE public.blog_posts IS 'Blog articles and content management';

-- Storage bucket configuration
-- Create the 'images' storage bucket
INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
VALUES (
  'images',
  'images',
  true,
  10485760, -- 10MB limit
  ARRAY['image/jpeg', 'image/png', 'image/gif', 'image/webp', 'image/svg+xml']
) ON CONFLICT (id) DO NOTHING;

-- Storage policies for images bucket
CREATE POLICY "Public can view images" ON storage.objects
FOR SELECT USING (bucket_id = 'images');

CREATE POLICY "Authenticated users can upload images" ON storage.objects
FOR INSERT WITH CHECK (
  bucket_id = 'images' 
  AND auth.role() = 'authenticated'
);

CREATE POLICY "Users can update own images" ON storage.objects
FOR UPDATE USING (
  bucket_id = 'images' 
  AND auth.role() = 'authenticated'
);

CREATE POLICY "Users can delete own images" ON storage.objects
FOR DELETE USING (
  bucket_id = 'images' 
  AND auth.role() = 'authenticated'
);

CREATE POLICY "Admins can manage all images" ON storage.objects
FOR ALL USING (
  bucket_id = 'images' 
  AND auth.jwt() ->> 'role' = 'admin'
);
